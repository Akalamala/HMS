swagger: '2.0'
info:
  version: 1.0.0
  title: dmdProjectAPI
host: blablabla.ru
tags:
  - name: auth
    description: requests for authorization
  - name: private
    description: requests available only for authorized users
  - name: public
    description: requests available for all users
schemes:
  - http
paths:

  /auth/login:
    post:
      description: Login
      parameters:
        - name: authData
          in: body
          description: data for authorization
          schema:
            $ref: '#/definitions/AuthorizationRequestModel'
      tags:
        - auth
      responses:
        '200':
          description: Login and password are correct
          schema:
            $ref: '#/definitions/Staff'
        '401':
          description: Login or password are incorrect
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Somesthing bad happend on backend;
          schema:
            $ref: '#/definitions/Error'
  /auth/logout:
    post:
      description: Logout
      tags:
        - auth
      responses:
        '200':
          description: Successful logout
        '401':
          description: 'Unauthorized, you can''t logout'
          
          
  /auth/signUp:
    post:
      description: sign up
      parameters:
        - name: user
          in: body
          description: The user JSON to sign up
          schema:
            $ref: '#/definitions/NewClientModel'
          required: true
      tags: 
        - auth
      responses:
        200:
          description: User has been created
          schema:
            $ref: '#/definitions/Client'
        400:
          description: Ошибка валидации данных пользователя
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Somesthing bad happend on backend;
          schema:
            $ref: '#/definitions/Error'
            
  /hotels/new:
    put:
      description: create new hotel
      parameters:
        - name: newHotel
          in: body
          schema:
            $ref: '#/definitions/CreateHotelModelRequest'
      tags:
        - private
      responses:
        '200':
          description: Successful creation
        '203':
          description: Access denied. Only for admins.
        '500':
          description: Common error
  /hotels/full:
    get:
      description: get all hotels with description
      tags:
        - public
      responses:
        '200':
          description: 'Everything ok, user has recieved all hotels'
          schema:
            type: array
            items:
              $ref: '#/definitions/HotelModelResponse'
        '204':
          description: No hotels found
        '500':
          description: Somesthing bad happend on backend
          schema:
            $ref: '#/definitions/Error'
            
  /hotels/short:
    get:
      description: get all hotels with description
      tags:
        - public
      responses:
        '200':
          description: 'Everything ok, user has recieved all hotels'
          schema:
            type: array
            items:
              $ref: '#/definitions/HotelModelResponse'
        '204':
          description: No hotels found
        '500':
          description: Somesthing bad happend on backend
          schema:
            $ref: '#/definitions/Error'
            
  '/hotel/{hotelId}/rooms/getTypes/full':
    get:
      description: get all room types of hotel with description
      tags:
        - public
      parameters:
        - name: hotelId
          in: path
          type: string
          required: true
          description: hotel id
      responses:
        '200':
          description: 'Everything ok, user has recieved all room types'
          schema:
            type: array
            items:
              $ref: '#/definitions/RoomTypeResponseModel'
        '204':
          description: No hotels found
        '500':
          description: Somesthing bad happend on backend;
          schema:
            $ref: '#/definitions/Error'
            
  '/hotel/{hotelId}/rooms/getTypes/short':
    get:
      description: get all room types of hotel without description
      tags:
        - public
      parameters:
        - name: hotelId
          in: path
          type: string
          required: true
          description: hotel id
      responses:
        '200':
          description: 'Everything ok, user has recieved all room types'
          schema:
            type: array
            items:
              $ref: '#/definitions/RoomTypeResponseModel'
        '204':
          description: No hotels found
        '500':
          description: Somesthing bad happend on backend;
          schema:
            $ref: '#/definitions/Error'
            
  /private/owner/hotel/update:
    post:
      description: create new hotel
      parameters:
        - name: newHotel
          in: body
          schema:
            $ref: '#/definitions/CreateHotelModelRequest'
      tags:
        - private
      responses:
        '200':
          description: Successful creation
        '203':
          description: Access denied. Only for admins.
        '500':
          description: Common error
          
          
  /hotel/information:
    get:
      description: get information about hotel by user
      
      tags:
        - private
      responses:
        '200':
          description: 'Everything ok, user has recieved all room types'
          schema:
            items:
              $ref: '#/definitions/HotelModelResponse'
              
        '401':
          description: 'Unauthorized'
          
        '500':
          description: Common error
              
        
  /private/owner/update:
    post:
      description: update info about owner
      parameters:
        - name: ownerData
          in: body
          description: data for update
          schema:
            $ref: '#/definitions/CreateEditHotelOwnerModelRequest'
      tags:
        - private
      responses:
        '200':
          description: Successful updating
          schema:
            $ref: '#/definitions/OwnerIdResponseModel'
        '201':
          description: Not found
            
        '500':
          description: Somesthing bad happend on backend
          schema:
            $ref: '#/definitions/Error'
            
            
  /private/owner/all:
   get:
      description: get all owners
      tags:
        - private
      responses:
        '200':
          description: 'Everything ok, user has recieved all owners'
          schema:
            type: array
            items:
              $ref: '#/definitions/OwnerResponseModel'
        '204':
          description: No owners
        '500':
          description: Somesthing bad happend on backend
          schema:
            $ref: '#/definitions/Error'
          
          
  /private/rooms/getAvailableRooms:
    get:
      description: get available rooms for specific period of time
      tags:
        - public
      parameters:
        - name: search
          in: body
          required: true
          schema:
            $ref: '#/definitions/AvailableRoomRequestModel'
      responses:
        '200':
          description: 'Everything ok, user has recieved all available rooms'
          schema:
            type: array
            items:
              $ref: '#/definitions/AvailableRoomResponseModel'
        '204':
          description: No rooms available for this date
        '500':
          description: Somesthing bad happend on backend;
          schema:
            $ref: '#/definitions/Error'
            
  /private/profile/edit:
    post:
      description: Edit profile
      parameters:
        - name: EditProfileModel
          in: body
          description: Data for editing
          schema:
            $ref: '#/definitions/NewClientModel'
      tags:
        - private
      responses:
        '200':
          description: Profile has been edited
        '400':
          description: Invalid data
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized, you can''t edit profile'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Somesthing bad happend on backend;
          schema:
            $ref: '#/definitions/Error'
  /private/rooms/book:
    put:
      description: book room
      parameters:
        - name: bookItem
          in: body
          description: data for booking
          schema:
            $ref: '#/definitions/BookModelRequest'
      tags:
        - private
      responses:
        '200':
          description: Room has been successfully booked. State - booked
        '401':
          description: 'Unauthorized, you can''t book room if you are not authorized'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Somesthing bad happend on backend;
          schema:
            $ref: '#/definitions/Error'
            
            
  /private/orders:
    get:
      description: Get all orders with 'to' field greater than now
      parameters:
        - name: requestDates
          in: body
          description: data for searching
          schema:
            $ref: '#/definitions/OrderListModelRequest'
            
      tags:
        - private
      responses:
        '200':
          description: Array of orders
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderedRoomResponseModel'
        '204':
          description: No order's found
        '401':
          description: Your are not allowed to see your orders while you are not authorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: >-
            Серверная ошибка(если в описании указано, что это необработанная
            ошибка - срочно сообщаем разработчику)
          schema:
            $ref: '#/definitions/Error'
  /private/orders/cancel:
    post:
      description: cancel order
      parameters:
        - name: CancelOrderItem
          in: body
          description: Data for canceling
          schema:
            $ref: '#/definitions/CancelBookRequestModel'
      tags:
        - private
      responses:
        '200':
          description: Order is canceled. State - canceled
        '400':
          description: >-
            It isn't available to cancel not for your orders or order is already
            in state paid
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized, you can''t cancel order if you are not authorized'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: No order found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Somesthing bad happend on backend;
          schema:
            $ref: '#/definitions/Error'
            
            
            
  /private/owner/employees/update:
    post:
      description: update info about employee
      parameters:
        - name: empData
          in: body
          description: data for update
          schema:
            $ref: '#/definitions/CreateEditEmployeeModelRequest'
      tags:
        - private
      responses:
        '200':
          description: Successful updating
          schema:
            $ref: '#/definitions/EmployeeIdResponseModel'
        '201':
          description: Not found
          
        '403':
          description: Invalid data
            
        '500':
          description: Something bad happend on backend
          schema:
            $ref: '#/definitions/Error'
            
  /private/owner/employees/all:
    get:
      description: get all employees
      tags:
        - private
      responses:
        '200':
          description: 'Everything ok, user has recieved everything'
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeResponseModel'
        '204':
          description: No employees
        '500':
          description: Somesthing bad happend on backend
          schema:
            $ref: '#/definitions/Error'
            
            
  /private/owner/employees/delete:
    post:
      description: update info about employee
      parameters:
        - name: empData
          in: body
          description: id to delete
          schema:
            $ref: '#/definitions/DeleteEmployeeModelRequest'
      tags:
        - private
      responses:
        '200':
          description: Successful deleting
          schema:
            $ref: '#/definitions/EmployeeIdResponseModel'
        '201':
          description: Not found
            
        '500':
          description: Something bad happend on backend
          schema:
            $ref: '#/definitions/Error'
            
            
  /private/room/update:
    post:
      description: update info about a room
      parameters:
        - name: roomData
          in: body
          description: data for update
          schema:
            $ref: '#/definitions/RoomModelRequest'
      tags:
        - private
      responses:
        '200':
          description: Successful updating
        '201':
          description: Not found
          
        '403':
          description: Invalid data
            
        '500':
          description: Something bad happend on backend
          schema:
            $ref: '#/definitions/Error'
            
  /private/room/all:
    get:
      description: get all employees
      tags:
        - private
      responses:
        '200':
          description: 'Everything ok, user has recieved everything'
          schema:
            type: array
            items:
              $ref: '#/definitions/RoomModelResponse'
        '204':
          description: No rooms ever
        '500':
          description: Somesthing bad happend on backend
          schema:
            $ref: '#/definitions/Error'
  
  /private/order/pay:
    post:
      description: payment request
      parameters:
        - name: payData
          in: body
          description: data for payment
          schema:
            $ref: '#/definitions/OrderIDModelRequest'
      responses:     
        200:
          description: Successful payment
        '403':
            description: Invalid data
        '500':
            description: Somesthing bad happend on backend
            schema:
              $ref: '#/definitions/Error'
        
    
  
  /private/roomtype/update:
    post:
      description: update info about roomtype
      parameters:
        - name: roomtypeData
          in: body
          description: data for update
          schema:
            $ref: '#/definitions/RoomTypeModelRequest'
      tags:
        - private
      responses:
        '200':
          description: Successful updating
          schema:
            $ref: '#/definitions/EmployeeIdResponseModel'
        '201':
          description: Not found
          
        '403':
          description: Invalid data
            
        '500':
          description: Something bad happend on backend
          schema:
            $ref: '#/definitions/Error'
            
  /private/roomtype/all:
    get:
      description: get all roomtypes
      tags:
        - private
      responses:
        '200':
          description: 'Everything ok, user has recieved everything'
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeRoomTypeResponseModel'
        '204':
          description: No roomtypes
        '500':
          description: Somesthing bad happend on backend
          schema:
            $ref: '#/definitions/Error'
            
            
  /private/roomtype/delete:
    post:
      description: update info about roomtype
      parameters:
        - name: roomtypeData
          in: body
          description: id to delete
          schema:
            $ref: '#/definitions/DeleteRoomTypeModelRequest'
      tags:
        - private
      responses:
        '200':
          description: Successful deleting
        '201':
          description: Not found
            
        '500':
          description: Something bad happend on backend
          schema:
            $ref: '#/definitions/Error'
            
            
  
definitions:
  Error:
    type: object
    properties:
      fieldErrors:
        type: array
        items:
          type: object
          properties:
            field:
              type: string
            message:
              type: string
      commonErrors:
        type: array
        items:
          type: string
  User:
    type: object
    properties:
      firstName:
        type: string
      secondName:
        type: string
      fatherName:
        type: string
      id:
        type: integer
  Staff:
    type: object
    properties:
      id:
        type: integer
      firstName:
        type: string
      secondName:
        type: string
      fatherName:
        type: string
      email:
        type: string
      hash_password:
        type: string
        
        
  CreateEditHotelOwnerModelRequest:
    type: object
    properties:
      id:
        type: integer
      firstName:
        type: string
      secondName:
        type: string
      fatherName:
        type: string
      email:
        type: string
      hash_password:
        type: string
      hotel_id:
        type: integer
        
        
  OwnerResponseModel:
    type: object
    properties:
      id:
        type: integer
      firstName:
        type: string
      secondName:
        type: string
      fatherName:
        type: string
      email:
        type: string
      hotelId:
        type: integer
      hotelTitle:
        type: string
        
        
  CreateEditEmployeeModelRequest:
    type: object
    properties:
      id:
        type: integer
      firstName:
        type: string
      secondName:
        type: string
      fatherName:
        type: string
      email:
        type: string
      password:
        type: string
  
        
  OwnerIdResponseModel:
    type: object
    properties:
      ownerID:
        type: integer
  
  AuthorizationRequestModel:
    type: object
    properties:
      mail:
        type: string
      password:
        type: string
  NewClientModel:
    type: object
    properties:
      mail:
        type: string
      password:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      fatherName:
        type: string
      phoneNumber:
        type: string
        
        
  Client:
    type: object
    properties:
      id:
        type: integer
      mail:
        type: string
      password:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      fatherName:
        type: string
      phoneNumber:
        type: string
  RoomTypeResponseModel:
    type: object
    properties:
      id:
        type: integer
        description: id of room type
      cost:
        type: integer
        description: price per night
      description:
        type: string
        description: Description of room
      photoPath:
        type: string
        description: url for getting photo
      title:
        type: string
        description: type of room
  RoomTypeShort:
    type: object
    properties:
      id:
        type: integer
        description: id of room type
      title:
        type: string
        description: type of room
  Hotel:
    type: object
    properties:
      id:
        type: integer
        description: id of hotel
      name:
        type: string
        description: title of hotel
      description:
        type: string
        description: description of hotel
      phone_number:
        type: string
        description: phone number of hotel
      mail:
        type: string
        description: mail of hotel
      address:
        type: string
        description: address of hotel
  HotelModelResponse:
    type: object
    properties:
      id:
        type: integer
        description: id of hotel
      title:
        type: string
        description: title of hotel
      description:
        type: string
        description: description of hotel
      phone_number:
        type: string
        description: phone number of hotel
      mail:
        type: string
        description: mail of hotel
      address:
        type: string
        description: address of hotel
  CreateHotelModelRequest:
    type: object
    properties:
      title:
        type: string
        description: title of hotel
      description:
        type: string
        description: description of hotel
      phone_number:
        type: string
        description: phone number of hotel
      mail:
        type: string
        description: mail of hotel
      address:
        type: string
        description: address of hotel
  EditHotelModelRequest:
    type: object
    properties:
      title:
        type: string
        description: title of hotel
      description:
        type: string
        description: description of hotel
      phone_number:
        type: string
        description: phone number of hotel
      mail:
        type: string
        description: mail of hotel
      address:
        type: string
        description: address of hotel
  AvailableRoomResponseModel:
    type: object
    properties:
      typeID:
        type: string
      roomNumber:
        type: integer
      id:
        type: integer
  
  AvailableRoomRequestModel:
    type: object
    properties:
      from:
        type: string
        description: Date when user is going to arrive
      to:
        type: string
        description: Date when user is going to leave
      roomTypeId:
        type: integer
        description: 'Id of room type. If specified - use it to filter, otherwise ignore it'
      hotelId:
        type: integer
        description: id of hotel
  BookModelRequest:
    type: object
    properties:
      from:
        type: string
        description: Date when user is going to arrive
      to:
        type: string
        description: Date when user is going to leave
      roomId:
        type: integer
        description: id of room to be booked
        
        
        
  OrderedRoomResponseModel:
    type: object
    properties:
      id:
        type: integer
        description: id of an order
      hotelId:
        type: integer
        description: id of a hotel
      roomNumber:
        type: integer
        description: id of a room
      from:
        type: string
        format: date-time
        description: start of a billing period
      to:
        type: string
        format: date-time
        description: end of a billing period
      status:
        type: string
        enum:
          - BOOKED
          - CANCELLED
          - PAID
      cost:
        type: number
        format: double
        description: price for a room during this period
  
  CancelBookRequestModel:
    type: object
    properties:
      orderId:
        type: integer
        description: id of order
        
        
  EmployeeIdResponseModel:
    type: object
    properties:
      employeeID:
        type: integer
        
  EmployeeResponseModel:
    type: object
    properties:
      id:
        type: integer
      firstName:
        type: string
      secondName:
        type: string
      fatherName:
        type: string
      email:
        type: string
        
  DeleteEmployeeModelRequest:
    type: object
    properties:
      employeeID:
        type: integer
        
        
  RoomModelRequest:
    type: object
    properties:
      id:
        type: integer
        description: id of an order
      typeID:
        type: integer
        description: id of a hotel
      roomNumber:
        type: integer
        description: id of a room
      status:
        type: string
        enum:
          - BOOKED
          - CANCELLED
          - PAID
          
          
  RoomModelResponse:
    type: object
    properties:
      id:
        type: integer
        description: id of an order
      TypeId:
        type: integer
      typeName:
        type: string
      roomNumber:
        type: integer
        description: id of a room
  
      status:
        type: string
        enum:
          - BOOKED
          - CANCELLED
          - PAID
      cost:
        type: number
        format: double
        description: price for a room during this period
        
        
  OrderIDModelRequest:
    type: object
    properties:
      id:
        type: integer
        description: id of an order
        
        
  OrderListModelRequest:
    type: object
    properties:
      from:
        type: string
      to:
        type: string
        
        
  RoomTypeModelRequest:
    type: object
    properties:
      id:
        type: integer
        description: id of room type
      name:
        type: string
      description:
        type: string
        description: Description of room
      photoPath:
        type: string
        description: url for getting photo
      cost:
        type: number
        format: double
        
        
  DeleteRoomTypeModelRequest:
    type: object
    properties:
      id:
        type: integer
        description: id of room type
        
  EmployeeRoomTypeResponseModel:
    type: object
    properties:
      id:
        type: integer
        description: id of room type
      name:
        type: string
      description:
        type: string
        description: Description of room
      photoPath:
        type: string
        description: url for getting photo
      cost:
        type: number
        format: double
  

  
  
  
